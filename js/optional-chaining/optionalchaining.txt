Optional chaining in JavaScript is a feature that allows you to safely access deeply nested properties of an object without having to check if each reference in the chain is valid. This is done using the ?. operator.

How It Works
The optional chaining operator ?. works similarly to the dot . operator, but it short-circuits and returns undefined if the reference is null or undefined. This prevents runtime errors that would occur if you tried to access properties of null or undefined.

Syntax
Here are some examples of how to use optional chaining:

1. 
Accessing Properties:

let user = {
name: "John",
address: {
street: "123 Main St"
}
};

let street = user.address?.street; // "123 Main St"
let city = user.address?.city; // undefined

1. 
Calling Methods:

let user = {
greet: function() {
return "Hello!";
}
};

let greeting = user.greet?.(); // "Hello!"
let farewell = user.farewell?.(); // undefined

1. 
Accessing Array Elements:

let users = [
{ name: "Alice" },
{ name: "Bob" }
];

let firstUser = users?.[0]?.name; // "Alice"
let thirdUser = users?.[2]?.name; // undefined

Benefits
•  Simplifies Code: Reduces the need for multiple checks and makes the code cleaner and more readable.

•  Prevents Errors: Avoids runtime errors when accessing properties of null or undefined.

Limitations
