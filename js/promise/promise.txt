Realtime example : Youtube-Channel and Subscriber
I Promise a Result
Producing-Code is code that can take some time.
Consuming-Code is code that must wait for the result.
A Promise is an Object that links Producing code and Consuming code.
A Promise contains both the producing code and calls to the consuming code
When the producing code obtains the result, it should call one of the two 
callbacks
--
A Producing-Code is code that does something and takes time.
Example:
	code that loads the data over a network.
	let Result = getEmployees();
	return Result;
A Consuming-Code that wants the result of the Producing-Code once it's ready.
Example:
	Many functions may need that result.
	viewEmployees();
--
A promise is a special JavaScript object that links the producing-code and 
the consuming-code together. In terms of our analogy: this is the 
“subscription list”.
The producing-code takes whatever time it needs to produce the promised 
result, and the “promise” makes that result available to all of the subscribed 
code when it’s ready.
--
The function passed to new Promise is called the executor. When new Promise is 
created, the executor runs automatically. It contains the producing code which 
should eventually produce the result. In terms of the analogy above: the executor is the data.
--
Its arguments resolve and reject are callbacks provided by JavaScript itself. 
Our code is only inside the executor.
--
When the executor obtains the result, be it soon or late, doesn’t matter, it 
should call one of these callbacks:
--
resolve(value) — if the job is finished successfully, with result value.
reject(error) — if an error has occurred, error is the error object.
--
So to summarize: the executor runs automatically and attempts to perform a job. 
When it is finished with the attempt, it calls resolve if it was successful or 
reject if there was an error.
--
The promise object returned by the new Promise constructor has these internal properties:
state — pending 	initial.
		fulfilled 	when resolve is called.
		rejected 	when reject is called.
result —undefined initial
		value 		when resolve() is called. 
		error 		when reject() is called.
//
There can be only a single result or an error.
The state and result are internal.