What is Synchronous?
Executing the functions or code one-by-one/line-by-line is called synchronous.
Example:
	Booking the movie tickets from one counter.	
--
What is Asynchronous?	
Executing the functions or code parallel is called asynchronous.
Example:
	Booking the movie tickets from multiple counters.
--
What is AJAX?
	AJAX is not a programming language, it is a part of javascript.
	AJAX is a technique for accessing web servers [Example: Tomcat] 
	from a web page [Example: Chrome].
	AJAX stands for Asynchronous JavaScript And XML.
	JavaScript is synchronous by default.
	By using ajax we can implement asynchronous mechanism in javascript.
	By default javascript won't wait for to get response from the server.
	
--
What is Usage of AJAX?
By using AJAX we can perform CRUD operations.
	We can Read data from a web server.
	We can Send data to a web server.
	We can Update a web page without reloading the page.
	We can Delete the records from the database.
--
How AJAX Works?
	AJAX allows web pages to be updated asynchronously by exchanging data 
	with a web server behind the scenes. This means that it is possible to 
	update parts of a web page, without reloading the whole page.
	AJAX is a misleading name. AJAX applications might use XML to transport 
	data, but it is equally common to transport data as plain text or JSON text.
	--
	Browser [Chrome]	<-->	Internet	<-->	Web Server [Tomcat]
	1, 2 ,7,8					3,6					4,5
	1. An event occurs in a web page (the page is loaded, a button is clicked)
	2. An XMLHttpRequest object is created by javascript.
	3. The XMLHttpRequest object sends a request to a web server.
	4. The server processes the request.
	5. The server prepares the response object.
	6. The server sends a response object back to the web page.
	7. The response is read by javascript.
	8. Proper action (like page update) is performed by javascript.
--
How to get XMLHttpRequest Object?
	XMLHttpRequest is a built-in browser object that allows to make 
	HTTPrequests in JavaScript.
	Despite having the word “XML” in its name, it can operate on any data, 
	not only in XML format. 
	We can upload/download files, track progress and much more.
	Right now, there’s another, more modern method fetch, that somewhat deprecates XMLHttpRequest.
	
1. Create an XMLHttpRequest object.
	Syntax:
		let xhr = new XMLHttpRequest();
--
2. open request to a server.
	Syntax
		xhr.open("method_name", "http://hostname.domainname:portnumber/appname/service_url", [async, user, password]);
		This method specifies the main parameters of the request:

		method – HTTP-method. Usually "GET" or "POST".
		service_url – the URL to request, a string, can be URL object.
		async – if explicitly set to false, then the request is synchronous, we’ll cover that a bit later.
		user, password – login and password for basic HTTP auth (if required).
		Please note that open call, contrary to its name, does not open the connection. 
		It only configures the request, but the network activity only starts with the call of send.
	Example:
		xhr.open ("GET", "departments_url", true);
		xhr.open ("POST","departments_url");
--
3. Send request to a server
	Syntax
		xhr.send();
		xhr.send([request_body]);
		This method opens the connection and sends the request to server. 
		The optional body parameter contains the request body.
		Some request methods like GET do not have a body. 
		And some of them like POST use body to send the data to the server. 
		We’ll see examples of that later.
	Example
		xhr.send();
		xhr.send("'departmentId':'270',
					'departmentName':'HR',
					'managerId':'200',
					'locationId':'1700'");
--
4. Listen to xhr events for response.
	These three events are the most widely used:
		error();
		progress();
		load():
	error()
	when the request couldn’t be made, e.g. network down or invalid URL.
	progress()
	triggers periodically while the response is being downloaded, reports how 
	much has been downloaded.
	load()
	when the request is complete (even if HTTP status is like 400 or 500), and the response is fully downloaded.
--
4. Define a call back function.
	A Callback function is passed as a parameter to another function.
	syntax
		xhr.onload = function() {
		//process the response object.	
		}
--
What is Access Across Domains?
What is CORS policy issue?
	For security reasons, modern browsers do not allow access across domains.
	This means that both the web page and the XML/JSON file it tries to load, must be located on the same server.
	The examples on aadhar all persons pics  located on the aadhar domain.
	If you want to use the example above on one of your own web pages, persons pics you load must be located on your own server.
	Example
		aadhar 		aadhar.com
	--Enabled
		phonePe phonepe.com
		gpay 	gpay.com
		jio 	jio.com user-reg.html
	USA
		Embassy usaembassy.com
	--
	--Rectricted
	pakistan
		rupe 	rupe.com
--
Is javascript asynchronous by default?
	No, javascript is always synchronous (one-by-one or queue).
--
XML or JSON?
	Carrying the data to and from the server to browser we can use XML and JSON
	JSON is understandable, shorter and faster then XML.
--
What is XMLHttpRequest?
	XMLHttpRequest is used for asynchronous communication between browser and server.
	Sends data from the browser to sever in the background.
	Receives the data from the server to browser.
	Updates the data on webpage without reloading.
--
Properties of XMLHttpRequest?
	readyState
		It represents the state of the request. It ranges from 0 to 4.
		Holds the status of the XMLHttpRequest.
		0: request not initialized
		1: server connection established
		2: request received to the server
		3: processing request by server
		4: request finished and response is ready
	onreadystatechange: 
		It is called whenever readystate attribute changes.
		It must not be used with synchronous requests.	  				  
		reponseText : returns response as text.
		responseXML	returns : response as XML.
--
Methods of XMLHttpRequest?
	open(method, URL);
		opens the request specifying get or post method and url.
    open(method, URL, async);	
		same as above but specifies asynchronous or not.
    open(method, URL, async, username, password);
		same as above but specifies username and password.
    send()
		sends get request.
	send(string)
		send post request.
    setRequestHeader(header,value):	it adds request headers.
	//TODO
	setRequestHeader()
	//TODO
	getResponseHeader()
	//TODO
	getAllResponseHeaders()
	//TODO
	abort()
	//TODO
--
What is difference between onreadystatechange and readyState?
	//TODO
