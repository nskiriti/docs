What is BOM?
The Browser Object Model (BOM) allows JavaScript to "talk to" the browser.
There are no official standards for the Browser Object Model (BOM).
Since modern browsers have implemented (almost) the same methods and properties
for JavaScript interactivity, it is often referred to, as methods and 
properties of the BOM.
--
What is Window Object?
The window object is supported by all browsers. It represents the browser's 
window.
All global JavaScript objects, functions, and variables automatically become 
members of the window object.
Global variables are properties of the window object.
Global functions are methods of the window object.
All Objects are childs of the Window object.
--
Even the document object (of the HTML DOM) is a property of the window object:

window.document.getElementById("header");
is the same as:
document.getElementById("header");
Window Size
Two properties can be used to determine the size of the browser window.

Both properties return the sizes in pixels:

window.innerHeight - the inner height of the browser window (in pixels)
window.innerWidth - the inner width of the browser window (in pixels)
The browser window (the browser viewport) is NOT including toolbars and scrollbars.

Example
let w = window.innerWidth;
let h = window.innerHeight;
Other Window Methods
Some other methods:

window.open() - open a new window
window.close() - close the current window
window.moveTo() - move the current window
window.resizeTo() - resize the current window
--
alert();    - It shows a message and waits for the user to press “OK”.
    The mini-window with the message is called a modal window. The word “modal” 
    means that the visitor can’t interact with the rest of the page, press 
    other buttons, etc, until they have dealt with the window. In this case – 
    until they press “OK”.
prompt();
    The function prompt accepts two arguments
    result = prompt(title, [default]);
    It shows a modal window with a text message, an input field for the visitor, and the buttons OK/Cancel.
    title:
        The text to show the visitor.
    default:
    An optional second parameter, the initial value for the input field.
    The square brackets in syntax [...]
    The square brackets around default in the syntax above denote that the 
    parameter is optional, not required.

    The visitor can type something in the prompt input field and press OK. Then 
    we get that text in the result. Or they can cancel the input by pressing 
    Cancel or hitting the Esc key, then we get null as the result.

    The call to prompt returns the text from the input field or null if the input was canceled.
confirm();
    The function confirm shows a modal window with a question and two buttons: OK and Cancel.
    The result is true if OK is pressed and false otherwise.
	
------
What is cross origin in window object?
What is diff between local vs Session vs Global	storages?
Local Storage, Session Storage, and Global Storage (though Global Storage isn’t an official term) are different types of web storage mechanisms used in web development to store data on the client-side. Here’s a comparison:

1. Local Storage (localStorage)
------
Persistence: Data persists even after the browser is closed and remains until manually deleted.
Scope: Data is stored per origin (protocol + domain + port).
Size Limit: Around 5MB per origin.
Accessibility: Accessible from any page of the same origin.
Use Case: Storing user preferences, theme settings, authentication tokens (though not recommended for security reasons).

Example:

js example:

localStorage.setItem("username", "Kireeti");
console.log(localStorage.getItem("username")); // "Kireeti"

2. Session Storage (sessionStorage)
------
Persistence: Data is stored only for the session and gets cleared when the tab or browser is closed.
Scope: Limited to the tab where it was created.
Size Limit: Around 5MB per origin.
Accessibility: Accessible only within the same tab.
Use Case: Storing temporary data like form inputs before submission, or maintaining state within a single session.

Example:

js example:

sessionStorage.setItem("sessionData", "Temporary Data");
console.log(sessionStorage.getItem("sessionData")); // "Temporary Data"


3. Global Storage:
------
Not an official web storage API, but it generally refers to cookies, IndexedDB, or even a shared state across multiple tabs.
Cookies can be accessed across different tabs and even different origins (depending on settings).
IndexedDB allows structured storage of larger amounts of data.
Comparison with Local & Session Storage:

Cookies: Can store small amounts of data (4KB limit), but are sent with every HTTP request, which affects performance.
IndexedDB: Good for storing larger datasets (up to several GBs) and allows complex querying.

Key Differences Table:
------
Feature	    |LocalStorage	        |SessionStorage	                |GlobalStorage (Cookies, IndexedDB)
Persistence:|Until manually cleared	|Until tab/browser is closed	|Varies (Cookies expire, IndexedDB persists)
Scope:	    |Per origin	            |Per tab	                    |Depends on implementation
Size Limit:	|~5MB	                |~5MB	                        |Cookies (4KB), IndexedDB (GBs)
Accessibility:|Across all tabs	    |Within the same tab	        |Varies (Cookies across origins, IndexedDB per origin)
------
When to Use What?
Local Storage: Use when data should persist across sessions (e.g., dark mode setting).
Session Storage: Use for temporary session-based data (e.g., form drafts).
Cookies: Use for small, essential data that needs to be sent with HTTP requests (e.g., authentication tokens).
IndexedDB: Use for storing large datasets that need to be retrieved efficiently.

