NOTES: video 18:Use state hook in react JS  
Date: 23/oct/2024

										USESTATE
										--------
The overall topic for the functional components.
1. First import the useState from React library.
2. use state is nothing but it is a method in this method we have to pass the default values for which variables are dynamically changing.
3. Using the array destructor concept we have to pass two arguments. One is a variable name, and the other is an event name.
4. In that use state method whatever default value is assigned automatically it will be assigned to the first argument in the array variable.
5. We have to call the event name in the event handling area and then pass the updated value in the argument or we have to use the callback function then return the updated variable here.
6. If more than one value when we update this one occurs problem. To overcome this issue we have to pass objects instead of normal values in the useState method. The same array destructing is continuing here, but the fetching of information will change. We have to object. property name for showing information.
7. At the event handling we have to update only those variables only we have to call. Remaining all values as it well comes using ... object name syntax.										

-------------------------------useState-FunctionalComponent-----------------------------------

Either functional or class, state means data, which can be string, boolean, number, object or array. so we use this state data to display in our component dynamically, which means component should re-render dynamically when state value is changed.
------------------------------------------------------------------------------------------

EXAMPLE-1:
Let see an example of functional comp App with 2 variables and dynamically chnaging only one of its value,productName.
------------------

import React,{useState} from 'react'

function App(){
		let [productName, updateName] = useState("Real Me 8 Pro")
		let price = 16000;
		return (
				 <>
					<h1>Product name :{product}</h1>
					<h1>Price :{price}</h1>
					
					<input id = "pname"/>
					<button onClick = {()=>{
											 let pname = document.getElementById("pname").value;	updateName(pname);}}>Change</button>
				 </>	
					)
					
					
		}
		
console-window
--------------
Product name :Real Me 8 Pro ==> Iphone
Price : 16000
------------------------------------------------------------------------------------------

EXAMPLE-2:
Let see an example of functional comp App with 2 variables and dynamically chnaging only one of its value,price by only using updatePrice.
--------------------

import React,{useState} from 'react'

function App(){
		let [productName, updateName] = useState("Real Me 8 Pro");
		let [price, updatePrice]= useState(16000);
		return (
				 <>
					<h1>Product name :{product}</h1>
					<h1>Price :{price}</h1>
					
					<input id = "mprice"/>
					<button onClick = {()=>{
											 let mprice = document.getElementById("mprice").value;	updatePrice(pname);}}>Change</button>
				 </>	
					)
					
					
		}
		
console-window
--------------
Product name :Real Me 8 Pro
Price : 16000 ==> 20000




Therefore, React has come up with state and useState concepts.
state    --> class components
useState --> functional components

If we want to dynamically update some information and re-render the component in DOM, then we take help of state and useState methods. these are also called as hooks.
useState does 2 jobs, 1. update counter value and re-render the function.

So, coming back to example 1: in order to enable useState method from react, we need to named import it using {}.
	step:1		import React,{useState} from 'react'
	
	step:2 		calling useState method inside the function,and also pass the initial value of
            	the data for which you want to dynamically change. here, initial productName value is "Real Me 8 Pro". 
				
	step:3		so, useState("Real Me 8 Pro") is a function/method; usually any function return
            	some content.similarly useState return an array with two values.
				[value1 value2] = [value setMethod]
				Value1 = initial value passed into useState method,
				Value2 = a function which is capable of updating Value1.
				
	step: 4		using array destructuring method we assign useState("Real Me 8 Pro") to array
				with two values. [productName, updateName] = useState("Real Me 8 Pro")

	step: 5     updateName method can be used in 2 ways. 1. passing the value from
				input as argument to updateName function. or 2. writing another arrow
				or anonymous function in order to access previous value along with modified value. prev value is argument to the arrow function written as part of argument to the updateName function, see example below.
------------------------------------------------------------------------------------------
EXAMPLE-3:	accessing prev value and modified value of any property in object.

import React,{useState} from 'react'

function App(){
		let [productName, updateName] = useState("Real Me 8 Pro");
		let [price, updatePrice]= useState(16000);
		return (
				 <>
					<h1>Product name :{product}</h1>
					<h1>Price :{price}</h1>
					
					<input id = "mprice"/>
					<button onClick = {()=>{
											 let mprice = document.getElementById("mprice").value;	updatePrice((prev)=>{
																	return prev + mprice});}}>Change</button>
				 </>	
					)
					
					
		}
		
console-window
--------------
Product name :Real Me 8 Pro
Price : 16000 ==> 20000----> 1600020000

------------------------------------------------------------------------------------
EXAMPLE-4:	Initiliasing useState with an object.
------------------

import React,{useState} from 'react'

function App(){
		let [product, updateProduct] = useState({
												productName : "Real Me 8 Pro",
												price: 16000		})
		
		return (
				 <>
					<h1>Product name :{product.productName}</h1>
					<h1>Price :{product.price}</h1>
					
					<input id = "modifiedVal"/>
					<button onClick = {()=>{
											 let modifiedVal = document.getElementById("modifiedVal").value;
											 updateProduct({...product, price:modifiedVal});
											 updateProduct({productName : product.productName,
												price: modifiedVal});
						                                  }}>Change</button>
				 </>	
					)
					
					
		}
		
console-window
--------------
Product name :Real Me 8 Pro ==> Iphone
Price : 16000		

