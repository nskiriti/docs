NOTES: video 10-Props in react JS 
Date: 18/oct/2024  
1)00:00:00 function component
2)00:15:55 class component

https://chatgpt.com/share/67128ed1-7da4-8010-b7b0-6fc3d1116717

1. Props are basically used at the run time.
2. Dynamic values we can send to the Child component in the parent component like normal attribute type in the component tag.
3. Once these are defined we can get those values in the component using parameters based on the functional component. So directly we can display those values in components using props. parameter name.
4. In class components, directly we can get through the constructor or use this. props. parameter name, but constructors are not mandatory.
5. Here props are not mandatory to name in the component we can give them as per our wish.
6.  As per our wish we can call the component in the parent component.
7. Props are immutable we can't override the existing values in the component.
Note: When we use the constructor keyword in the class component compulsory we have to include the super() keyword inside the constructor function. This is as per the ES6 rule,  but in this video, this point is missing. I tried but I got the error. That's why I mentioned this point. This will help other developers. 

PROPS in React
--------------

Basically React is a component based library either with a class or functional components, where a HTML like sytax(JSX) is returned. 
Note: functional component is called, while class component is initiated.

-----------------------------------------------------------------------------------------------
How to call a child component from parent in functional component?

APP.js
------
import User from './user.js'

function APP(){
	return (
				<user />	
				)
	}
In the above example APP is parent component and user is child component. If we want to send any information from APP to user/ Parent to child component, then PROPS(Props can be any data type, such as strings, numbers, arrays, functions, objects, etc.) concept comes into picture. irrespective of class or functional component. What is a child component here? any component with HTML like content returned in its class or function, and is called in the return statement of other(parent) component.

User.js
-------
function User(){
	return (
				<h1>user name: John</h1>	
				)
	}
export default User	

Output : user name: John (on browser)
---------------------------------------------------------------------------------------------

How to send information dynamically from parent to child using PROPS?

APP.js - 1 user details sedning
------
import User from './user.js'

function APP(){
	return (
				<user  name = 'Moon' age = 25/>	==> This is like sending properties for html tag
				)
	}

// name = 'Moon' ===> to be given as Key="value" pairs, so that it goes as an object to child component. making easy to access an object in child component. usually it is called props but can be denoted by any name. spacing is recommended for better readability among multiple props.

User.js
-------
function User(props){				==> props can be any name.
		console.log(props); ==> object
	return ( <>									  ==> Only one parent tag allowed in JSX		
				<h1>user name: {props.name}</h1>  ==> props.name is string, so we use {};
				<h1>age: {props.age}</h1>
			 </>		
				)
	}
export default User		
----------------------------------------------------------------------------------------------

APP.js - sending multiple user details, not just multiple props
------
import User from './user.js'

function APP(){
	return (<>
				<user  name = 'Moon' age = 25/>
				<user  name = 'John' age = 26/>
				<user  name = 'foo' age = 27/>
				</>)
	}



User.js
-------
function User(props){				
		console.log(props); 
	return ( <>									  		
				<h1>user name: {props.name}</h1>  
				<h1>age: {props.age}</h1>
			 </>		
				)
	}
export default User

so, each time user component is called and respective props are sent as object to child component function argument, can be accessed as object.

-------------------------------------------------------------------------------------------------
PROPS in CLASS component
------------------------

APP.js - sending multiple user details
------
import User from './user.js'

function APP(){
	return (<>
				<user  name = 'Moon' age = 25/>
				<user  name = 'John' age = 26/>
				<user  name = 'foo' age = 27/>
				</>)
	}
	
User.js
-------
import React from "react"

class User extends React.Component{	
		render (){		==> we dont use props as argument for render function
		return(
				<>
				<h1>user name: {this.props.name}</h1>  ==> instead, this keyword has the object.
				<h1>age: {this.props.age}</h1>
				</>
				)
			}			
	}
export default User
-----------------------------------------------------------------------------------------------

In functional component, props is input for child components functions argument, but in class initialisation is done differently, where the object of class is created, there parent component props are stored as object form in the said class's properties. to access those properties, we use 'This' keyword.

Every class has a constructor function, whatever input comes to this constructor function, so whichever object is being created using this function, received input sists as properties of this class. 

User.js with constructor function
---------------------------------
import React from "react"

class User extends React.Component{	
		constructor(props){  			==>  props comes as argument for constructor function
			super(props);
			}

		render (){		==> we dont use props as argument for render function
		return(
				<>
				<h1>user name: {this.props.name}</h1>  ==> instead, this keyword has the object.
				<h1>age: {this.props.age}</h1>
				</>
				)
			}			
	}
Output is same with or without constructor function.

Note: Calling super(props): It's essential to call super(props) in the constructor to ensure that the parent React.Component class is properly initialized with the passed props.

Note: When we use the constructor keyword in the class component compulsory we have to include the super() keyword inside the constructor function. This is as per the ES6 rule,  but in this video, this point is missing. I tried but I got the error. That's why I mentioned this point. This will help other developers.
--------------------------------------------------------------------------------------------
PROPS are immutable:

User.js
-------
function User(props){				
		console.log(props);
props.name = "fgh"		    ==> error: cannot assign read only property
	return ( <>									  		
				<h1>user name: {props.name}</h1>  
				<h1>age: {props.age}</h1>
			 </>		
				)
	}
export default User

